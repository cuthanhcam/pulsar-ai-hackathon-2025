// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  phone         String?
  role          String    @default("user")
  geminiApiKey  String?
  credits       Int       @default(500)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  lessons       Lesson[]
  quizResults   QuizResult[]
  progress      Progress?
  chatMessages  ChatMessage[]
  enrollments   Enrollment[]
  ratings       Rating[]
  posts         Post[]
  postLikes     PostLike[]
  postComments  PostComment[]
  commentLikes  CommentLike[]
  conversations ConversationParticipant[]
  sentMessages  Message[]
  notifications Notification[]
  otps          OTP[]
  transactions  CreditTransaction[]
}

// OTP Model - Temporary verification codes (auto-deleted after 5 minutes)
model OTP {
  id        String   @id @default(cuid())
  email     String   // Not unique - allow multiple OTPs per email
  code      String   // 6-digit code
  userId    String?  // Optional - for existing users
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // OTP expires after 5 minutes
  verified  Boolean  @default(false) // Track if OTP was verified
  createdAt DateTime @default(now())
  
  @@index([email])
  @@index([email, verified])
  @@index([expiresAt])
}

model Lesson {
  id            String    @id @default(cuid())
  userId        String
  title         String
  description   String?
  content       String
  topic         String
  difficulty    String    @default("beginner")
  duration      Int       @default(30)
  completed     Boolean   @default(false)
  isPublic      Boolean   @default(false)
  views         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mindmap       Mindmap?
  modules       Module[]
  quizzes       Quiz[]
  chatMessages  ChatMessage[]
  enrollments   Enrollment[]
  ratings       Rating[]
  posts         Post[]
  
  @@index([userId])
  @@index([userId, createdAt])
  @@index([isPublic, createdAt])
}

model Module {
  id            String              @id @default(cuid())
  lessonId      String
  title         String
  description   String?
  order         Int
  completed     Boolean             @default(false)
  createdAt     DateTime            @default(now())
  
  lesson        Lesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  sections      Section[]
  embeddings    SectionEmbedding[]
  
  @@index([lessonId])
  @@index([lessonId, order])
}

model Section {
  id            String    @id @default(cuid())
  moduleId      String
  title         String
  content       String
  order         Int
  duration      Int       @default(10)
  completed     Boolean   @default(false)
  isGenerating  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  module        Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  embeddings    SectionEmbedding[]
  
  @@index([moduleId])
  @@index([moduleId, order])
}

// Track embeddings for RAG system
model SectionEmbedding {
  id          String   @id @default(cuid())
  sectionId   String
  moduleId    String
  courseId    String
  userId      String
  vectorId    String   // UUID in Qdrant
  contentHash String   // MD5 hash to detect content changes
  chunkIndex  Int      // Index of chunk within section
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  module  Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([moduleId])
  @@index([courseId])
  @@index([userId])
  @@index([contentHash])
}

model Mindmap {
  id            String    @id @default(cuid())
  lessonId      String    @unique
  structure     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Quiz {
  id            String    @id @default(cuid())
  lessonId      String
  sectionId     String?
  title         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions     QuizQuestion[]
  results       QuizResult[]
  
  @@index([sectionId])
}

model QuizQuestion {
  id            String    @id @default(cuid())
  quizId        String
  question      String
  options       Json
  correctAnswer Int
  explanation   String?
  order         Int
  createdAt     DateTime  @default(now())
  
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id            String    @id @default(cuid())
  userId        String
  quizId        String
  score         Int
  answers       Json
  passed        Boolean   @default(false)
  completedAt   DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Progress {
  id                String    @id @default(cuid())
  userId            String    @unique
  lessonsCompleted  Int       @default(0)
  quizzesCompleted  Int       @default(0)
  currentStreak     Int       @default(0)
  longestStreak     Int       @default(0)
  lastAccessedAt    DateTime?
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id            String    @id @default(cuid())
  userId        String
  lessonId      String?
  role          String
  content       String
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson        Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([lessonId])
  @@index([userId, createdAt])
}

model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  lessonId      String
  progress      Int       @default(0)
  completed     Boolean   @default(false)
  enrolledAt    DateTime  @default(now())
  lastAccessedAt DateTime @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model Rating {
  id            String    @id @default(cuid())
  userId        String
  lessonId      String
  rating        Int
  review        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([lessonId])
  @@index([lessonId, rating])
}

model Post {
  id            String    @id @default(cuid())
  userId        String
  lessonId      String
  caption       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  likes         PostLike[]
  comments      PostComment[]
  
  @@index([userId])
  @@index([lessonId])
  @@index([createdAt])
}

model PostLike {
  id            String    @id @default(cuid())
  postId        String
  userId        String
  reactionType  String    @default("like") // like, love, haha, wow, sad, angry
  createdAt     DateTime  @default(now())
  
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@index([reactionType])
}

model PostComment {
  id            String         @id @default(cuid())
  postId        String
  userId        String
  content       String
  parentId      String?        // For nested replies
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent        PostComment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       PostComment[]  @relation("CommentReplies")
  likes         CommentLike[]
  
  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

model CommentLike {
  id            String       @id @default(cuid())
  commentId     String
  userId        String
  reactionType  String       @default("like")
  createdAt     DateTime     @default(now())
  
  comment       PostComment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

// Messenger System
model Conversation {
  id               String              @id @default(cuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  participants     ConversationParticipant[]
  messages         Message[]
  
  @@index([updatedAt])
}

model ConversationParticipant {
  id               String       @id @default(cuid())
  conversationId   String
  userId           String
  lastReadAt       DateTime?
  createdAt        DateTime     @default(now())
  
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
}

model Message {
  id               String       @id @default(cuid())
  conversationId   String
  senderId         String
  content          String
  isRead           Boolean      @default(false)
  createdAt        DateTime     @default(now())
  
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender           User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

// Notifications
model Notification {
  id            String    @id @default(cuid())
  userId        String
  type          String    // reaction, comment, message, follow
  title         String
  content       String
  link          String?
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// Credit Transactions - Track all credit purchases and usage
model CreditTransaction {
  id            String    @id @default(cuid())
  userId        String
  amount        Int       // Positive for purchases/additions, negative for usage
  type          String    // 'purchase', 'admin_add', 'course_clone', 'quiz_generate', 'initial_bonus'
  description   String
  packageName   String?   // For purchases: "Starter Pack", "Pro Pack", etc.
  price         Float?    // USD price for purchases
  balanceBefore Int       // Credit balance before transaction
  balanceAfter  Int       // Credit balance after transaction
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([userId, createdAt])
}
