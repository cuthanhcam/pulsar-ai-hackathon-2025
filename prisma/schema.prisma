// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  phone         String?
  role          String    @default("user")
  geminiApiKey  String?
  credits       BigInt    @default(500)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  lessons       Lesson[]
  quizResults   QuizResult[]
  progress      Progress?
  chatMessages  ChatMessage[]
}

model Lesson {
  id            String    @id @default(cuid())
  userId        String
  title         String
  description   String?
  content       String
  topic         String
  difficulty    String    @default("beginner")
  duration      Int       @default(30)
  completed     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mindmap       Mindmap?
  modules       Module[]
  quizzes       Quiz[]
  chatMessages  ChatMessage[]
  
  @@index([userId])
  @@index([userId, createdAt])
}

model Module {
  id            String    @id @default(cuid())
  lessonId      String
  title         String
  description   String?
  order         Int
  completed     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  sections      Section[]
  
  @@index([lessonId])
  @@index([lessonId, order])
}

model Section {
  id            String    @id @default(cuid())
  moduleId      String
  title         String
  content       String
  order         Int
  duration      Int       @default(10)
  completed     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  module        Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@index([moduleId])
  @@index([moduleId, order])
}

model Mindmap {
  id            String    @id @default(cuid())
  lessonId      String    @unique
  structure     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Quiz {
  id            String    @id @default(cuid())
  lessonId      String
  title         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions     QuizQuestion[]
  results       QuizResult[]
}

model QuizQuestion {
  id            String    @id @default(cuid())
  quizId        String
  question      String
  options       Json
  correctAnswer Int
  explanation   String?
  order         Int
  createdAt     DateTime  @default(now())
  
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id            String    @id @default(cuid())
  userId        String
  quizId        String
  score         Int
  answers       Json
  completedAt   DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Progress {
  id                String    @id @default(cuid())
  userId            String    @unique
  lessonsCompleted  Int       @default(0)
  quizzesCompleted  Int       @default(0)
  currentStreak     Int       @default(0)
  longestStreak     Int       @default(0)
  lastAccessedAt    DateTime?
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id            String    @id @default(cuid())
  userId        String
  lessonId      String?
  role          String
  content       String
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson        Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([lessonId])
  @@index([userId, createdAt])
}
